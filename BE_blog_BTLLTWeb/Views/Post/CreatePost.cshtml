
@{
    ViewData["Title"] = "CreatePost";
    Layout = "~/Views/Shared/_LayoutSideBar.cshtml";
}
@model List<Category>

<div class="s-content">
	<div class="alert">
		<div class="alert-box alert-box--error hideit">
			<p>Error Message. Your Message Goes Here.</p>
			<i class="fa fa-times alert-box__close" aria-hidden="true"></i>
		</div>
		<!-- end error -->

		<div class="alert-box alert-box--success hideit">
			<p>Success Message. Your Message Goes Here.</p>
			<i class="fa fa-times alert-box__close" aria-hidden="true"></i>
		</div>
		<!-- end success -->
	</div>
	<header class="listing-header">
		<h1 class="h2">Create post</h1>
	</header>

	<form class="form__create" action="createpost" method="post" enctype="multipart/form-data">
		<div class="form__create-item create-title">
			<label class="create-title" for="title-create-post">Your title</label>
			<input id="title-create-post"
				   class="full-width"
				   type="text"
				   name="title" />
			<span class="" style="color:red;font-family: 'Heebo', sans-serif;font-weight: 700;font-size: 1.4rem;position: relative;top:-16px">@ViewBag.TitlePost</span>

		</div>

		<div class="form__create-item">
			<label class="create-title" for="image-create-post">Your Image Title</label>
			<input id="image-create-post"
				   name="image"
				   class="custom-file-input"
				   type="file" />
			<image class="image-create-post-preview" src="" />
			<button class="btn image-create-post-btn">
				Click to add image
			</button>
			<span class="" style="color:red;font-family: 'Heebo', sans-serif;font-weight: 700;font-size: 1.4rem;">@ViewBag.ImagePost</span>

		</div>

		<div class="form__create-item">
			<label class="create-title" for="editor">Your Content</label>
			<textarea id="editor" name="content"></textarea>
			<span class="" style="color:red;font-family: 'Heebo', sans-serif;font-weight: 700;font-size: 1.4rem;">@ViewBag.ContentPost</span>

		</div>

		<div class="form__create-item">
			<label class="create-title" for="topic">Your Topics</label>
			<ul class="topic__list">
				@foreach (var item in Model)
				{
				<li class="topic__list-item">
						<label class="btn btn--stroke label__topic" for="@item.NameCategory">@item.NameCategory</label>
					<input class="checkbox__topic"
						   id="@item.NameCategory"
						   type="checkbox"
						   name="topic"
						   value="@item.IdCategory" />
				</li>
					
				}

			</ul>
		</div>
		<span class="" style="color:red;font-family: 'Heebo', sans-serif;font-weight: 700;font-size: 1.4rem;position: relative;top:-35px">@ViewBag.TopicPost</span>

		<div class="create-post-policy">
			<input class="policy-checkbox" id="policy" type="checkbox" />
			<label class="policy-message" for="policy">I have read the policy</label>
		</div>

		<input name="submit"
			   id="submit"
			   class="btn btn--primary btn-wide btn--large full-width"
			   value="Create Post"
			   type="submit" />
	</form>
</div>

<!-- end s-content -->
@section createpost{
	<script src="../js/create_post.js"></script>
	<script src="../Ckeditor/build/ckeditor.js"></script>
	<script language="JavaScript" type="text/javascript">
		class MyUploadAdapter {
			constructor(loader) {
				this.loader = loader;
			}
			upload() {
				return this.loader.file.then(
					(file) =>
						new Promise((resolve, reject) => {
							this._initRequest();
							this._initListeners(resolve, reject, file);
							this._sendRequest(file);
						})
				);
			}

			// Aborts the upload process.
			abort() {
				if (this.xhr) {
					this.xhr.abort();
				}
			}

			_initRequest() {
				const xhr = (this.xhr = new XMLHttpRequest());

				xhr.open("POST", '@Url.Action("UpLoadPostImage","Post")', true);
				xhr.responseType = "json";
			}
			_initListeners(resolve, reject, file) {
				const xhr = this.xhr;
				const loader = this.loader;
				const genericErrorText = `Couldn't upload file: ${file.name}.`;

				xhr.addEventListener("error", () => reject(genericErrorText));
				xhr.addEventListener("abort", () => reject());
				xhr.addEventListener("load", () => {
					const response = xhr.response;

					// This example assumes the XHR server's "response" object will come with
					// an "error" which has its own "message" that can be passed to reject()
					// in the upload promise.
					//
					// Your integration may handle upload errors in a different way so make sure
					// it is done properly. The reject() function must be called when the upload fails.
					if (!response || response.error) {
						return reject(
							response && response.error
								? response.error.message
								: genericErrorText
						);
					}

					// If the upload is successful, resolve the upload promise with an object containing
					// at least the "default" URL, pointing to the image on the server.
					// This URL will be used to display the image in the content. Learn more in the
					// UploadAdapter#upload documentation.
					resolve({
						default: response.url,
					});
				});

				// Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
				// properties which are used e.g. to display the upload progress bar in the editor
				// user interface.
				if (xhr.upload) {
					xhr.upload.addEventListener("progress", (evt) => {
						if (evt.lengthComputable) {
							loader.uploadTotal = evt.total;
							loader.uploaded = evt.loaded;
						}
					});
				}
			}

			_sendRequest(file) {
				// Prepare the form data.
				const data = new FormData();

				data.append("upload", file);

				// Important note: This is the right place to implement security mechanisms
				// like authentication and CSRF protection. For instance, you can use
				// XMLHttpRequest.setRequestHeader() to set the request headers containing
				// the CSRF token generated earlier by your application.

				// Send the request.
				this.xhr.send(data);
			}
		}
		function MyCustomUploadAdapterPlugin(editor) {
			editor.plugins.get("FileRepository").createUploadAdapter = (loader) => {
				// Configure the URL to the upload script in your back-end here!
				return new MyUploadAdapter(loader);
			};
		}

		ClassicEditor.create(document.querySelector("#editor"), {
			extraPlugins: [MyCustomUploadAdapterPlugin],
		})
			.then((editor) => {
				console.log(editor);
			})
			.catch((error) => {
				console.error(error);
			});
	</script>
	}
